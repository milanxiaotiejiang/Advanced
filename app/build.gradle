apply plugin: 'com.android.application'

apply plugin: 'android-aspectjx'
//或者这样也可以
//apply plugin: 'com.hujiang.android-aspectjx'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.advanced"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
        flavorDimensions "1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags
            }
        }
        ndk {
            moduleName "threadHook-lib"
            abiFilters "x86", "armeabi-v7a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    dexOptions {
        preDexLibraries = false
        jumboMode true
        javaMaxHeapSize "4g"
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    lintOptions {
        quiet true
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir "libs"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }


//    aspectjx {
//        //排除所有package路径中包含`android.support`的class文件及库（jar文件）
//        exclude 'android.support'
//    }
//    aspectjx {
//        //关闭AspectJX功能
//        enabled false
//    }

}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta03'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.browser:browser:1.2.0-alpha07'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    //aop
//    implementation 'org.aspectj:aspectjrt:1.9.4'
    implementation 'me.weishu:epic:0.6.0'
    //权限
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    //rx
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //log日志库
    implementation 'com.seabreezerobot:LogLibrary:v1.0.0'
    //    implementation 'com.tencent.mm.hardcoder:app2sys:1.0.0'

//    implementation files('libs/DuplicatedBitmapAnalyzer-1.0.jar')

    implementation 'com.squareup.haha:haha:2.1'

    //x2c框架
    implementation 'com.zhangyue.we:x2c-lib:1.0.6'
    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'


    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'
    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.1.0'

    //stetho 工具
    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    implementation 'com.qiniu:happy-dns:0.2.13'
    //异步加载布局
    implementation 'androidx.asynclayoutinflater:asynclayoutinflater:1.0.0'

    // Litho
    implementation 'com.facebook.litho:litho-core:0.33.0'
    implementation 'com.facebook.litho:litho-widget:0.33.0'
    annotationProcessor 'com.facebook.litho:litho-processor:0.33.0'
    // SoLoader
    implementation 'com.facebook.soloader:soloader:0.5.1'
    // For integration with Fresco
    implementation 'com.facebook.litho:litho-fresco:0.33.0'
    // For testing
    testImplementation 'com.facebook.litho:litho-testing:0.33.0'
    // Sections （options，用来声明去构建一个list）
    implementation 'com.facebook.litho:litho-sections-core:0.33.0'
    implementation 'com.facebook.litho:litho-sections-widget:0.33.0'
    compileOnly 'com.facebook.litho:litho-sections-annotations:0.33.0'
    annotationProcessor 'com.facebook.litho:litho-sections-processor:0.33.0'

}

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//variants.all { variant ->
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return
//    }
//
//    JavaCompile javaCompile = variant.javaCompiler
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true)
//        new Main().run(args, handler)
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break
//            }
//        }
//    }
//}

